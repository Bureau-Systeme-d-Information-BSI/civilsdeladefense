- resource.parent_id = params[:parent_id] if params[:parent_id].present? && resource.new_record?
.card
  .card-body
    = simple_form_for([:admin, :settings, resource]) do |f|
      = f.error_notification
      = f.error_notification message: f.object.errors[:base].to_sentence if f.object.errors[:base].present?
      .form-inputs
        - if resource.is_a?(JobApplicationFileType)
          = f.input :name
          = f.input :description
          - kinds = JobApplicationFileType.kinds.map {|k, v| [ JobApplicationFileType.human_attribute_name("kind/#{k}"), k] }
          = f.input :kind, collection: kinds, prompt: true
          = f.input :content
          - states = JobApplication.states.map {|k, v| [ JobApplication.human_attribute_name("state/#{k}"), k] }
          = f.input :from_state, collection: states, prompt: true
          = f.input :by_default
        - elsif resource.is_a?(Organization)
          = f.input :name
          = f.input :name_business_owner
          = f.input :administrator_email_suffix
          = f.input :subdomain
          = f.input :domain
          = f.input :logo_vertical
          = f.input :logo_horizontal
          = f.input :logo_vertical_negative
          = f.input :logo_horizontal_negative
          = f.input :image_background
        - elsif resource.is_a?(Cmg)
          = f.input :email
        - elsif resource.is_a?(EmailTemplate)
          = f.input :title
          = f.input :subject
          = f.input :body, style: 'height:400px;'
        - elsif resource.is_a?(SalaryRange)
          = f.input :professional_category, collection: ProfessionalCategory.all
          = f.input :experience_level, collection: ExperienceLevel.all
          = f.input :sector, collection: Sector.all
          = f.input :estimate_annual_salary_gross
          = f.input :estimate_monthly_salary_net
        - elsif resource.is_a?(OrganizationDefault)
          - kinds = OrganizationDefault.kinds.map {|k, v| [ OrganizationDefault.human_attribute_name("kind/#{k}"), k] }
          = f.input :kind, collection: kinds, prompt: true
          = f.input :value, as: :trix_editor
        - else
          = f.input :name
          - if resource.is_a?(Employer)
            = f.input :code
          - if resource.is_a?(Category)
            = f.input :parent_id, collection: nested_set_options(Category, @category) {|i| "#{'-' * i.level} #{i.name}" }
          - if resource.is_a?(Employer) && params[:parent_id].present?
            = f.input :parent_id, collection: Employer.roots
          - if resource.is_a?(StudyLevel)
            = f.input :official_level
      .form-actions.text-right.mt-4
        %ul.list-inline.mb-0
          - unless resource_class == Organization
            %li.list-inline-item
              = link_to(t('buttons.cancel'), collection_url, class: 'btn btn-body-color mb-0')
          %li.list-inline-item
            = button_tag(type: 'submit', class: 'btn btn-primary btn-raised mb-0') do
              = t("buttons.#{ resource.new_record? ? 'add' : 'edit' }")
              = fa_icon('send', class: 'ml-1')
