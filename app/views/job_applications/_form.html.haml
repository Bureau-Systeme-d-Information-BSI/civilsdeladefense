- unless user_signed_in?
  = render "devise/shared/france_connect"
= simple_form_for(@job_application, url: [:send_application, @job_offer], method: :post, data: { turbo: true, controller: "form-save", form_save_target: "form", action: "change->form-save#saveFormData submit->form-save#clearFormData" }) do |f|
  .form-inputs.mt-3
    - if f.object.errors["user.profile.base"].present?
      = f.error_notification message: f.object.errors["user.profile.base"].to_sentence
    - else
      = f.error_notification

    %h2.rf-h3= t('.general_informations')
    = f.simple_fields_for :user do |user_form|
      = user_form.simple_fields_for :profile do |profile_form|
        = profile_form.input :gender, collection: gender_options_for_select, input_html: { class: "rf-select" }, required: true
      = user_form.input :first_name, readonly: user_signed_in?
      = user_form.input :last_name, readonly: user_signed_in?
      = user_form.input :phone, required: true
      = render partial: '/department_profiles/form', locals: { form: user_form, name_prefix: "job_application[user_attributes][profile_attributes]", department_profiles: @job_application.user.profile.department_profiles }
    - unless user_signed_in?
      = f.simple_fields_for :user do |user_form|
        = user_form.input :photo

    %h2.rf-h3= t('.your_profile')

    = f.simple_fields_for :user do |user_form|
      = user_form.simple_fields_for :profile do |profile_form|
        = render partial: '/category_experience_levels/form', locals: { profile_form: profile_form, name_prefix: "job_application[user_attributes][profile_attributes]" }

        = profile_form.association :availability_range, input_html: { class: "rf-select" }

        = profile_form.association :study_level, required: true, input_html: { class: "rf-select" }

        = profile_form.association :experience_level, input_html: { class: "rf-select" }

        = profile_form.input :has_corporate_experience, label: "Expérience antérieure #{current_organization.operator_name}"

        = render partial: '/profile_foreign_languages/form', locals: { profile_form: profile_form, name_prefix: "job_application[user_attributes][profile_attributes]" }

        %h2.rf-h3= t('.documents')

        .d-flex.align-items-end.rf-mb-3w
          %div
            - label = (profile_form.object.resume.blank? || !user_signed_in?) ? t('.resume') : t('.resume_html')
            = profile_form.input :resume, label:, as: :file, required: (profile_form.object.resume.blank? || !user_signed_in?)
          %div.rf-ml-3w
            - if profile_form.object.resume.present? && user_signed_in?
              = link_to profile_form.object.resume_file_name, account_profiles_resume_path, target: '_blank'

    - job_application_files = @job_application.job_application_files.to_a
    - current_state = JobApplication.states[@job_application.state]
    - if @job_offer.spontaneous
      - job_application_file_types = JobApplicationFileType.where(spontaneous: true)
    - else
      - job_application_file_types = JobApplicationFileType.where(by_default: true).where("from_state <= ?", current_state).where(kind: %i(applicant_provided template)).all
    - job_application_file_types.each do |job_application_file_type, index|
      - job_application_file = job_application_files.detect{|x| x.job_application_file_type == job_application_file_type}
      - job_application_file ||= @job_application.job_application_files.build(job_application_file_type: job_application_file_type)
      = f.simple_fields_for :job_application_files, job_application_file, input_html: {placeholder: false, required: true} do |file_form|
        = file_form.hidden_field :job_application_file_type_id
        = file_form.hidden_field :do_not_provide_immediately, value: true
        = file_form.input :content, label: job_application_file_type.name, required: false
        - if current_user
          - collection = current_user.job_application_files.where(job_application_file_type: job_application_file_type).uniq { |f| f.content_file_name }
          = file_form.input :job_application_file_existing_id, collection: collection, label_method: :content_file_name, value_method: :id, input_html: { class: "rf-select" } if collection.any?

    %h2.rf-h3= t('.your_internet_presence')
    = f.simple_fields_for :user do |user_form|
      = user_form.input :website_url, required: false

    - unless user_signed_in?
      %h2.rf-h3= t('.your_account_creation')
      = f.simple_fields_for :user, input_html: {placeholder: false, required: true} do |user_form|
        = user_form.input :email, required: true
        %div{data: {controller: "password-visibility password-rules"}}
          = user_form.input :password, required: true, input_html: {data: { password_visibility_target: "passwordInput", action: "keyup->password-rules#check" }}
          = fa_icon("eye", class: "password-visibility-toggle", data: { password_visibility_target: "showButton", action: "click->password-visibility#toggle" })
          = fa_icon("eye-slash", class: "password-visibility-toggle d-none", data: { password_visibility_target: "hideButton", action: "click->password-visibility#toggle" })
          %div.rules{data: {password_rules_target: "rules"}}
            - %w[length uppercase lowercase number special].each do |rule|
              %div{data: {rule: rule}}
        %div{data: {controller: "password-visibility"}}
          = user_form.input :password_confirmation, required: true, input_html: {data: { password_visibility_target: "passwordInput" }}
          = fa_icon("eye", class: "password-visibility-toggle", data: { password_visibility_target: "showButton", action: "click->password-visibility#toggle" })
          = fa_icon("eye-slash", class: "password-visibility-toggle d-none", data: { password_visibility_target: "hideButton", action: "click->password-visibility#toggle" })
        = user_form.input :receive_job_offer_mails
        = user_form.input :terms_of_service, as: :boolean, label: tos_acceptance_text
        = user_form.input :certify_majority, as: :boolean, label: t('simple_form.labels.user.certify_majority_html')
    = f.invisible_captcha :subtitle, data: { form_save_target: "ignored" }
  %div
    .rf-input-group.rf-grid-row.rf-grid-row--center.rf-mt-6w
      = button_tag(type: 'submit', class: 'rf-btn rf-btn--lg') do
        = t('helpers.submit.job_application.save')
