# frozen_string_literal: true

require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Account::EmailsController, type: :controller do
  let(:user) { create(:confirmed_user) }
  let(:job_application) { create(:job_application, user: user) }
  let(:valid_attributes) do
    attributes_for(:email).merge(job_application_id: job_application.id)
  end

  let(:invalid_attributes) do
    attributes_for(:email, subject: nil)
  end

  before { sign_in user }

  describe "GET #index" do
    it "returns a success response" do
      Email.create! valid_attributes
      get :index, params: {job_application_id: job_application.id}
      expect(response).to be_successful
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Account::Email" do
        expect {
          post :create, params: {email: valid_attributes, job_application_id: job_application.id}
        }.to change(Email, :count).by(1)
      end

      it "redirects to the created account_email" do
        post :create, params: {email: valid_attributes, job_application_id: job_application.id}
        expect(response).to redirect_to([:account, job_application])
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: {email: invalid_attributes, job_application_id: job_application.id}
        expect(response).to be_successful
      end
    end
  end
end
