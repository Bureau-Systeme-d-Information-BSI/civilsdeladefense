# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Admin::JobApplicationsController, type: :controller do
  login_admin

  # This should return the minimal set of attributes required to create a valid
  # JobApplication. As you add validations to JobApplication, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    attributes_for(:job_application)
  end

  let(:invalid_attributes) do
    { first_name: '', last_name: '' }
  end

  describe 'GET #index' do
    it 'returns a success response' do
      create(:job_application)
      get :index, params: {}
      expect(response).to be_successful
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      job_application = create(:job_application)
      get :show, params: { id: job_application.to_param }
      expect(response).to be_successful
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) do
        { first_name: 'Pipo', last_name: 'Molo' }
      end

      it 'updates the requested admin_job_application' do
        job_application = create(:job_application)
        put :update, params: { id: job_application.to_param, job_application: new_attributes }
        job_application.reload
        expect(job_application.first_name).to eq('Pipo')
        expect(job_application.last_name).to eq('Molo')
      end

      it 'redirects to the admin_job_application' do
        job_application = create(:job_application)
        put :update, params: { id: job_application.to_param, job_application: valid_attributes }
        expect(response).to redirect_to([:admin, job_application])
      end
    end

    context 'with invalid params' do
      it "returns a success response (i.e. to display the 'edit' template)" do
        job_application = create(:job_application)
        put :update, params: { id: job_application.to_param, job_application: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'PUT #change_state' do
    context 'with valid params' do
      it 'updates the state of the requested job_application' do
        job_application = create(:job_application)
        put :change_state, params: { id: job_application.to_param, state: 'affected' }
        job_application.reload
        expect(job_application.state).to eq('affected')
      end

      it 'redirects to the admin_job_application' do
        job_application = create(:job_application)
        put :change_state, params: { id: job_application.to_param, state: 'affected' }
        expect(response).to redirect_to([:admin, job_application])
      end
    end

    context 'with invalid params' do
      it 'returns an error page' do
        job_application = create(:job_application)
        put :change_state, params: { id: job_application.to_param, state: 'non_existing_state' }
        expect(response.status).to eq(400)
      end
    end
  end
end
