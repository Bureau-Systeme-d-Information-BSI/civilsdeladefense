# frozen_string_literal: true

require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe JobOffersController, type: :controller do
  let(:job_offer) { create(:job_offer_published) }
  let(:job_application_file_type) { create(:job_application_file_type) }
  let(:file) { fixture_file_upload("document.pdf", "application/pdf") }

  describe "GET #index" do
    it "returns a success response" do
      get :index, params: {}
      expect(response).to be_successful
    end
  end

  describe "GET #show" do
    it "returns a 404 response when not published" do
      job_offer = create(:job_offer, state: :draft)
      get :show, params: {id: job_offer.to_param}
      expect(response.status).to eq(404)

      job_offer = create(:job_offer, state: :suspended)
      get :show, params: {id: job_offer.to_param}
      expect(response.status).to eq(404)

      job_offer = create(:job_offer, state: :archived)
      get :show, params: {id: job_offer.to_param}
      expect(response.status).to eq(404)
    end

    it "returns a success response" do
      get :show, params: {id: job_offer.to_param}
      expect(response).to be_successful
    end
  end

  describe "POST #send_application" do
    context "with logged in user and valid params" do
      login_user

      let(:valid_attributes) do
        attributes_for(
          :job_application,
          job_application_files_attributes: [
            {
              content: file,
              job_application_file_type_id: job_application_file_type.id
            }
          ],
          profile_attributes: attributes_for(:profile),
          terms_of_service: 1,
          certify_majority: 1
        )
      end

      it "returns a success response when all fields are valid" do
        expect {
          post :send_application, format: :json, params: {
            id: job_offer.to_param, job_application: valid_attributes
          }
        }.to change(JobApplication, :count).by(1)

        expect(response).to be_successful
      end

      it "create notification" do
        expect {
          post :send_application, format: :json, params: {
            id: job_offer.to_param, job_application: valid_attributes
          }
        }.to change(Notification, :count)
        expect(response).to be_successful
      end

      it "shoult not accept double application" do
        expect {
          post :send_application, format: :json, params: {
            id: job_offer.to_param, job_application: valid_attributes
          }
        }.to change(JobApplication, :count).by(1)
        expect(response).to be_successful

        expect {
          post :send_application, format: :json, params: {
            id: job_offer.to_param, job_application: valid_attributes
          }
        }.to change(JobApplication, :count).by(0)
        expect(response).not_to be_successful
      end
    end
  end
end
